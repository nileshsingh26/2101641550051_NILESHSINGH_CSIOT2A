CREATING A LINKED LIST:
#include<stdio.h>
#include<stdlib.h>
struct node{
	int data;
	struct node*next;
};


struct node*insert(struct node*pt,int value){
	struct node*temp;
	struct node*ptr1=(struct node*)malloc(sizeof(struct node));
	ptr1->data=value;
	ptr1->next=NULL;
	if(pt==NULL){
		ptr1->next=pt;
		pt=ptr1;
	}
	else{
		temp=pt;
		while(temp->next!=NULL){
			temp=temp->next;
		}
		ptr1->next=temp->next;
		temp->next=ptr1;
		
	}
	return pt;
}
struct node* create(struct node*ptr){
	int n,value;
	printf("Enter the terms of nodes\n");
	scanf("%d",&n);
	for(int i=0;i<n;i++){
		printf("Enter the data of %d node",i+1);
		scanf("%d",&value);
		ptr=insert(ptr,value);
	}
	return ptr;
}
void display(struct node*head){
	{
		struct node*temp=head;
		while(temp!=NULL){
			printf("%d\t",temp->data);
			temp=temp->next;
		}
	}
}
int main(){
	struct node*head=NULL;
	head=create(head);

}


DELETE AT BEGIN
#include<stdio.h>
#include<stdlib.h>
struct node{
	int data;
	struct node*next;
};
struct node* head;
void pop(){
	struct node* ptr;
	ptr=head;
	head=head->next;
	free(ptr);
}
void traverse(struct node* ptr){
	while(ptr!=NULL){
		printf("ELEMENT : %d\n",ptr->data);
		ptr=ptr->next;
	}
	
	
}
int main()
{
	
	struct node*second;
	struct node*third;
	head=(struct node*)malloc(sizeof(struct node));
	second=(struct node*)malloc(sizeof(struct node));
	third=(struct node*)malloc(sizeof(struct node));
	head->data=7;
	head->next=second;
	
	second->data=70;
	second->next=third;
	
	third->data=45;
	third->next=NULL;
pop();
	traverse(head);
}


DELETE AT GIVEN VALUE
#include<stdio.h>
#include<stdlib.h>
struct node{
	int data;
	struct node*next;
};
struct node* head;
void pop(int value){
	struct node* p=head;
	struct node* q=head->next;
	while(q->data!=value && q->next!=NULL){
		p=p->next;
		q=q->next;
	}
	if(q->data==value){
		p->next=q->next;
		free(q);
	}
}
void traverse(struct node* ptr){
	while(ptr!=NULL){
		printf("ELEMENT : %d\n",ptr->data);
		ptr=ptr->next;
	}
	
	
}
int main()
{
	
	struct node*second;
	struct node*third;
	head=(struct node*)malloc(sizeof(struct node));
	second=(struct node*)malloc(sizeof(struct node));
	third=(struct node*)malloc(sizeof(struct node));
	head->data=7;
	head->next=second;
	
	second->data=70;
	second->next=third;
	
	third->data=45;
	third->next=NULL;
    pop(70);
 //   pop();
	traverse(head);
}




DELETE AT INDEX
#include<stdio.h>
#include<stdlib.h>
struct node{
	int data;
	struct node*next;
};
struct node* head;
void pop(int index){
	int i=0;
	struct node* p=head;
	while(i<index-1){
		p=p->next;
	}
	struct node* q=p->next;
	p->next=q->next;
	free(q);
}
void traverse(struct node* ptr){
	while(ptr!=NULL){
		printf("ELEMENT : %d\n",ptr->data);
		ptr=ptr->next;
	}
	
	
}
int main()
{
	
	struct node*second;
	struct node*third;
	head=(struct node*)malloc(sizeof(struct node));
	second=(struct node*)malloc(sizeof(struct node));
	third=(struct node*)malloc(sizeof(struct node));
	head->data=7;
	head->next=second;
	
	second->data=70;
	second->next=third;
	
	third->data=45;
	third->next=NULL;
    pop(1);
	traverse(head);
}




INSERT AT END
#include<stdio.h>
#include<stdlib.h>
struct node{
	int data;
	struct node*next;
};
struct node *head;
void push(int new1){
	struct node*temp;
		struct node *ptr=(struct node*)malloc(sizeof(struct node));
		ptr->data=new1;
		ptr->next=NULL;
		temp=head;
		while(temp->next!=NULL){
			temp=temp->next;
		}
		temp->next=ptr;		
}

void traversal(struct node*ptr){
	while(ptr!=NULL){
		printf("Elements : %d\n",ptr->data);
		ptr=ptr->next;
		
	}
}

int main()
{
//	struct node *head;
	struct node *second;
	struct node *third;
	struct node *fourth;

	head=(struct node*)malloc(sizeof(struct node));	
	second=(struct node*)malloc(sizeof(struct node));
	third=(struct node*)malloc(sizeof(struct node));
	fourth=(struct node*)malloc(sizeof(struct node));
	head->data=7;
	head->next=second;
	
	second->data=11;
	second->next=third;
	
	third->data=45;
	third->next=fourth;
	
	fourth->data=55;
	fourth->next=NULL;
//	traversal(head);
     push(555);
	push(786);
	traversal(head);
	}
  
  
  
  
  MIDDLE ELEMENT OF LIST
  
  #include<stdio.h>
#include<stdlib.h>
struct node{
	int data;
	struct node*next;
};
struct node* middle1(struct node*head){
	int count=0,mid;
	struct node* temp=head;
	while(temp!=NULL){
		count++;
		temp=temp->next;
	}
	mid=count/2;
	if(count&1==0){
		mid-=1;
	}
	temp=head;
	while(mid>0){
		temp=temp->next;
		mid-=1;
	}
	return temp;
	
	
}

struct node*insert(struct node*pt,int value){
	struct node*temp;
	struct node*ptr1=(struct node*)malloc(sizeof(struct node));
	ptr1->data=value;
	ptr1->next=NULL;
	if(pt==NULL){
		ptr1->next=pt;
		pt=ptr1;
	}
	else{
		temp=pt;
		while(temp->next!=NULL){
			temp=temp->next;
		}
		ptr1->next=temp->next;
		temp->next=ptr1;
		
	}
	return pt;
}
struct node* create(struct node*ptr){
	int n,value;
	printf("Enter the terms of nodes\n");
	scanf("%d",&n);
	for(int i=0;i<n;i++){
		printf("Enter the data of %d node",i+1);
		scanf("%d",&value);
		ptr=insert(ptr,value);
	}
	return ptr;
}
void display(struct node*head){
	{
		struct node*temp=head;
		while(temp!=NULL){
			printf("%d\t",temp->data);
			temp=temp->next;
		}
	}
}
int main(){
	struct node*head=NULL;
	head=create(head);
	struct node* f=middle1(head);
	printf("%d",f->data);
}




MIDDLE ELEMENT BY 2 POINTER
#include<stdio.h>
#include<stdlib.h>
struct node{
	int data;
	struct node*next;
};
struct node* middle1(struct node*head){
	struct node*A=head;
	struct node*B=head;
	while(B!=NULL&&B->next!=NULL&&B->next->next!=NULL){
		A=A->next;
		B=B->next->next;
	}
	return A;
}

struct node*insert(struct node*pt,int value){
	struct node*temp;
	struct node*ptr1=(struct node*)malloc(sizeof(struct node));
	ptr1->data=value;
	ptr1->next=NULL;
	if(pt==NULL){
		ptr1->next=pt;
		pt=ptr1;
	}
	else{
		temp=pt;
		while(temp->next!=NULL){
			temp=temp->next;
		}
		ptr1->next=temp->next;
		temp->next=ptr1;
		
	}
	return pt;
}
struct node* create(struct node*ptr){
	int n,value;
	printf("Enter the terms of nodes\n");
	scanf("%d",&n);
	for(int i=0;i<n;i++){
		printf("Enter the data of %d node",i+1);
		scanf("%d",&value);
		ptr=insert(ptr,value);
	}
	return ptr;
}
void display(struct node*head){
	{
		struct node*temp=head;
		while(temp!=NULL){
			printf("%d\t",temp->data);
			temp=temp->next;
		}
	}
}
int main(){
	struct node*head=NULL;
	head=create(head);
	struct node* f=middle1(head);
	printf("%d",f->data);
}



REVERSE OF LINKED LIST
#include<stdio.h>
#include<stdlib.h>
struct node{
	int data;
	struct node*next;
};
struct node* reverse(struct node*head){
	if(head==NULL || head->next==NULL){
		return head;
	}
	struct node*first;
	struct node*new1;
	new1=reverse(head->next);
	first=head->next;
	first->next=head;
	head->next=NULL;
	return new1;
	
}

struct node*insert(struct node*pt,int value){
	struct node*temp;
	struct node*ptr1=(struct node*)malloc(sizeof(struct node));
	ptr1->data=value;
	ptr1->next=NULL;
	if(pt==NULL){
		ptr1->next=pt;
		pt=ptr1;
	}
	else{
		temp=pt;
		while(temp->next!=NULL){
			temp=temp->next;
		}
		ptr1->next=temp->next;
		temp->next=ptr1;
		
	}
	return pt;
}
struct node* create(struct node*ptr){
	int n,value;
	printf("Enter the terms of nodes\n");
	scanf("%d",&n);
	for(int i=0;i<n;i++){
		printf("Enter the data of %d node",i+1);
		scanf("%d",&value);
		ptr=insert(ptr,value);
	}
	return ptr;
}
void display(struct node*head){
	/*if(head==NULL){
		return head;
	}*/
	{
		struct node*temp=head;
		while(temp!=NULL){
			printf("%d\t",temp->data);
			temp=temp->next;
		}
	}
}
int main(){
	struct node*head=NULL;
	head=create(head);
	display(head);
	printf("\n");
	printf("Linked list after reverse\n");
	head=reverse(head);
	display(head);
}
